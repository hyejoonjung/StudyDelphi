unit FormMain;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, Stack;

type
  TMainForm = class(TForm)
    InEdit: TEdit;
    ParshingEdit: TEdit;
    OutputEdit: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure InEditKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
    fStack : TCustomStack;

    procedure DataManager(Const aStr : String);
    function GetOpPrec(const aStr : String) : Integer;
    function WhoPrecOp(const aOp1, aOp2 : String) : Integer;
    procedure Calculate(const aStr : String);
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

procedure TMainForm.FormCreate(Sender: TObject);
begin
  fStack := TCustomStack.Create;
end;

procedure TMainForm.FormDestroy(Sender: TObject);

begin
  if fStack <> nil then begin
    fStack.Free;
    fStack := nil;
  end;
end;

procedure TMainForm.InEditKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then
    DataManager(InEdit.Text);
end;

procedure TMainForm.DataManager(Const aStr : String);
var
  aOp : String;
  aParshigStr : String;
  i : Integer;
begin
  aParshigStr := '';
  if aStr = '' then
    Exit;
  for i := 1 to Length(aStr) do begin
    if StrToIntDef(aStr[i], -1) <> -1 then
      aParshigStr := aParshigStr + aStr[i]
    else begin  //  연산자일경우
      if  fStack.GetLength <= 0 then begin
        fStack.push(aStr[i])
      end else begin
        if aStr[i] = '(' then
          fStack.Push(aStr[i])
        else if aStr[i] = ')' then begin
          while True do begin
            aOp := fStack.Pop;
            if aOp = '(' then
              Break;
            aParshigStr := aParshigStr + aOp;
          end;
        end else begin
          aOp := fStack.Pop;
          if WhoPrecOp(aOp, astr[i]) > 0 then begin //스택에 있던것이  우선순위가 더 크거나같으면.. +-를 만났을 경우.
            aParshigStr := aParshigStr + aOp;
            while fStack.GetLength > 0 do begin
              aOp := fStack.Pop;
              if aOp = '(' then begin
                fStack.Push(aOp);
                Break;
              end else
                aParshigStr := aParshigStr + aOp
            end;
          end else
            aParshigStr := aParshigStr + aOp;
          fStack.Push(aStr[i]);
        end;
      end;
    end;
  end;
  while fStack.GetLength > 0 do
    aParshigStr := aParshigStr + fStack.Pop;
  ParshingEdit.Text := (aParshigStr);
  Calculate(aParshigStr);
end;

function TMainForm.GetOpPrec(const aStr : String) : Integer;  //우선순위 반환
begin
  if (aStr = '*') or (aStr = '/') then
    Result := 3
  else if (aStr = '+') or (aStr = '-') then
    Result := 2
  else if aStr = '(' then
    Result := 1
  else
    Result := 0;
end;

function TMainForm.WhoPrecOp(const aOp1, aOp2 : String) : Integer;  
var
  aOp, aNewOp : Integer;
begin
  aOp := GetOpPrec(aOp1);
  aNewOp := GetOpPrec(aOp2);
  if aOp > aNewOp then   //스텍에 있는 것이 우선순위가높은경우
    Result := 1
  else if aOp < aNewOp then //스텍에 있는 것이 우선순위가 낮은경우
    Result := -1
  else
    Result := 0;
end;

procedure TMainForm.Calculate(const aStr : String);
var
  aOperand1, aOperand2, i : Integer;
begin
  with fStack do begin
    for i := 1 to Length(aStr) do begin
      if StrToIntDef(aStr[i], -1) <> -1 then
        Push(aStr[i])
      else begin
        aOperand1 := StrToInt(Pop);
        aOperand2 := StrToInt(Pop);
        case aStr[i] of
          '+' : push(IntToStr(aOperand2 + aOperand1));
          '-' : push(IntToStr(aOperand2 - aOperand1));
          '*' : push(IntToStr(aOperand2 * aOperand1));
          '/' : push(FormatFloat('0.##',(aOperand2 / aOperand1)));
        end;
      end;
    end;
    OutputEdit.Text := pop;
  end;
end;

end.
