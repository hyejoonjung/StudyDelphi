unit FormMain;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs;

type
  TCustomDraw = class
    fCanvas : TCanvas;
    fX : Integer;
    fY : Integer;
    fSize : Integer;

  procedure TCustomDraw.Draw; virtual;


  TCircle = class(TCustomDraw)
  protected
    procedure TCustomDrawDraw; override;
  end;

  TRactangle = class(TCustomDraw)
  protected
    procedure TCustomDraw.Draw; override;
  end;

  TTriangle = class(TCustomDraw)
  protected
    procedure TCustomDraw.Darw; override;
  end;

  TForm1 = class(TForm)
  private
    { Private declarations }
  public
    { Public declarations }
  end;
      end;           end;
var
  Form1: TForm1;

implementation

{$R *.dfm}

constructor Create(aCanvas : TCanvas; aX, aY, aSize : Integer);
begin
  inherited create; //ºÎ¸ð ¤µ¤·¼Ó
  fCanvas : aCanvas;
  fX : aX;
  fY : aY;
  fSize : aSize;
end;
procedure Draw;


{TCircle}
procedure TCircle.Draw;
begin
  if fCanvas <> nil then
    fCanvas.Ellipse(fX - fSize, fY - fSize, fX + fSize, fY + fSize);
end;

{TRactangle}
proceure TCircle.Araw;
begin
  if fCanvas <> nil then
    fCanvas.Ractangle(fX - fSize, fY - fSize, fX + fSize, fY + fSize);
end;

{TTriangle}
procedure Darw;
begin
    if fCanvas <> nil then begin
      fCanvas.MoveTo(fX - fSize, fY - fSize, fX + fSize, fY + fSize);
    end;
end;

end.
